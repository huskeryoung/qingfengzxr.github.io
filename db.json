{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":1,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/stun/source/images/icons/stun-logo.svg","path":"images/icons/stun-logo.svg","modified":1,"renderable":1},{"_id":"source/images/header.jpg","path":"images/header.jpg","modified":1,"renderable":0},{"_id":"themes/stun/source/images/header.jpg","path":"images/header.jpg","modified":1,"renderable":1},{"_id":"source/images/menu.jpg","path":"images/menu.jpg","modified":1,"renderable":0},{"_id":"source/images/blogbk.jpg","path":"images/blogbk.jpg","modified":1,"renderable":0},{"_id":"themes/stun/source/images/menu.jpg","path":"images/menu.jpg","modified":1,"renderable":1},{"_id":"themes/stun/source/images/blogbk.jpg","path":"images/blogbk.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/stun/.commitlintrc.js","hash":"76ea83872acfd207aa554ba70d305d618493498f","modified":1594977252824},{"_id":"themes/stun/.cz-config.js","hash":"4fd1999ebda9b42993d421af0d4058984ca250d7","modified":1594977252812},{"_id":"themes/stun/.editorconfig","hash":"1ca001b8a7ed235eb9f5c21360b3a11eedb84ae7","modified":1594977252812},{"_id":"themes/stun/.eslintrc","hash":"1ba4f0ddd4bef04884c7fda6ef04f9d9697a62b4","modified":1594977252812},{"_id":"themes/stun/.gitignore","hash":"7745f04d70b1ea58b02d68dde999708836343c7a","modified":1594977252824},{"_id":"themes/stun/.prettierrc","hash":"4b6589404c509f4538daf6f3b8b3ee2ec37d2f4c","modified":1594977252812},{"_id":"themes/stun/.stylintrc","hash":"3305c42a95c986341d7c7dd03ed9f37a42da343c","modified":1594977252812},{"_id":"themes/stun/.travis.yml","hash":"01b368bb9fe874642b488a612d9b99fcf89454e2","modified":1594977252816},{"_id":"themes/stun/FAQ.md","hash":"56e38d5e5acf77e63d87991c29568a45ab6853e6","modified":1594977252812},{"_id":"themes/stun/LICENSE","hash":"c79ab3fe0ee8f2388376574dfe704b3df0c70a69","modified":1594977252812},{"_id":"themes/stun/README.md","hash":"be3e5cf47a83842addd57ebe7ff8b2c3e8ce207d","modified":1594977252812},{"_id":"themes/stun/README_en-US.md","hash":"c5e68319539d71476d8898e844c97069c57f6e8d","modified":1594977252812},{"_id":"themes/stun/_config.yml","hash":"2b6e20c63640f01c231e333d61dbfc2408471cb0","modified":1594990325816},{"_id":"themes/stun/package.json","hash":"f6ec59821d754ea9ba8d65e127c4704df969a3a8","modified":1594977252816},{"_id":"source/_data/stun.yml","hash":"2fd18de488755d9d886d63746ebd48fce06a9d1a","modified":1594990346629},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1594976989247},{"_id":"source/_posts/helloworld.md","hash":"f4f31d42d518d9f9d1cb7dba4e34587d61aba029","modified":1594990346629},{"_id":"source/categories/index.md","hash":"93e4e2aaaa1fa64d0877b33d123f68f6868bffd5","modified":1594990346629},{"_id":"source/tags/index.md","hash":"123555853b0d4a970babe45c569b67250f70fdab","modified":1594990346653},{"_id":"themes/stun/docs/README.md","hash":"ca7b6f0f858d579740b0590804633a89aeae8e39","modified":1594977252816},{"_id":"themes/stun/github/ISSUE_TEMPLATE.md","hash":"715fc0b0dd525c92ba22f7de0cde2690897e9c4b","modified":1594977252812},{"_id":"themes/stun/languages/en.yml","hash":"2947f4ceb833dd40c79fb2aa0ea5799ae444e1f5","modified":1594977252816},{"_id":"themes/stun/languages/zh-CN.yml","hash":"0cffc7416c502f674d4a32dab5b05a421c04797b","modified":1594977252816},{"_id":"themes/stun/languages/zh-HK.yml","hash":"1afd0e7b06515dd3e0f4542b8054c47aa6f39ec7","modified":1594977252816},{"_id":"themes/stun/layout/_layout.pug","hash":"e96f979b13286af6e2c7c4fad8f948dd8dd6d5a7","modified":1594977252816},{"_id":"themes/stun/layout/archive.pug","hash":"d45d078ae4196add83e21fcaed3ef168b237af90","modified":1594977252816},{"_id":"themes/stun/layout/category.pug","hash":"24153408b2971542d177227f09e93da7754bf75e","modified":1594977252816},{"_id":"themes/stun/layout/index.pug","hash":"df40cf1f051fd29f0f51ace74e9f7394f6ea2ab7","modified":1594977252812},{"_id":"themes/stun/layout/page.pug","hash":"a09149313a8d91bfbba74ef7e9a6082232afcde9","modified":1594977252816},{"_id":"themes/stun/layout/post.pug","hash":"a1cfdfcbfca4bdfbb601251596ced0c9364a06e1","modified":1594977252812},{"_id":"themes/stun/layout/tag.pug","hash":"46f956ad7e2aed879999ddf5e768d80c4bbe5b5f","modified":1594977252816},{"_id":"themes/stun/scripts/engine.js","hash":"a63a57c9206a77a79f93dbd86e86204447d7d904","modified":1594977252816},{"_id":"themes/stun/scripts/merge-config.js","hash":"b026a57d5591d23eca7d370b802049b4692b9a22","modified":1594977252816},{"_id":"source/_posts/network/计算机网络笔记与思考.md","hash":"d13d80105c6bed4ea3959119350c81586607cc3b","modified":1609243830459},{"_id":"source/_posts/plan/learning-plan.md","hash":"47c64543cbfbef01e6b52846af1fb18ee5eb438f","modified":1608457759811},{"_id":"themes/stun/docs/.vuepress/config.js","hash":"d672415b18a18a2980207b7b5b5ff1e9c48f0dfc","modified":1594977252816},{"_id":"themes/stun/docs/advanced/advanced.md","hash":"e30dfd24cadcd7bb0257e845c9b8d62f1815c1cf","modified":1594977252816},{"_id":"themes/stun/docs/advanced/assist.md","hash":"65cbe89bb3ae0ddb161f0fae50c799d5a15d9b6b","modified":1594977252816},{"_id":"themes/stun/docs/advanced/optimize.md","hash":"0d45bbc7be20642f59f4d47110029c4511f5b7dc","modified":1594977252816},{"_id":"themes/stun/docs/advanced/third-part.md","hash":"815563ea213c1fde294c9e4543cb4f98c96ac4a1","modified":1594977252816},{"_id":"themes/stun/docs/contribute/contribute.md","hash":"e5db2610c1ca78fd3f1d97f0a979bf8507d07148","modified":1594977252816},{"_id":"themes/stun/docs/guide/primary.md","hash":"d387f6a59f268ac074e68cb10333feb6dbb0c40c","modified":1594977252816},{"_id":"themes/stun/docs/guide/quick-start.md","hash":"fb16b55ec049390a724edc022f223d4dc7ea50cc","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/README.md","hash":"25204a495c550e0d62566ed73e2137b7b65ba577","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"3054e2c09bc205173c517fb1c36321f7c4c0db63","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"93c4454e48a6f1456c29aeb9d1332be186b49d4f","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/meta-item.pug","hash":"3d74dc8ba8651efd4a605e56a21e314678d04057","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"496216150f5c33887788168da6b8cb2975e0deba","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/timeline.pug","hash":"4e19a670f002d3c6bc740a2d6ef03964e6b59c09","modified":1594977252816},{"_id":"themes/stun/layout/_partials/config.pug","hash":"962ef662a59a9a38a6ead9c5f8acbe8bb0720845","modified":1594977252816},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"961554914427578b57ea3912d751d398f4eb381d","modified":1594977252816},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"62a6831d3b1d90d6c8335ce3402efc50e141eafb","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"4a786459a8e6a4f378a9d834502f8b11aa66f185","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"2bed65ed4d314dc587e2359e20ae099b46181ed5","modified":1594977252816},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"f38531772d1a444b3239a00f2db028fc86ab7342","modified":1594977252816},{"_id":"themes/stun/scripts/filters/image-setting.js","hash":"412318b6d189d5355dbcc52c9762072f7ecdaad4","modified":1594977252816},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"d5baf39faeff5368182be1f59fb598d023985cde","modified":1594977252816},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"6785e981bfcf87ca587bef36231be430bba2254d","modified":1594977252816},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"159dff6e4f7020545c9b151108398cd383d613e2","modified":1594977252816},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"888c9eaaddcdb9b88d07837a9091aa39ed3fe677","modified":1594977252816},{"_id":"themes/stun/scripts/tags/friends.js","hash":"c2fe1e8e128f464d772bcb7534efef54ad224310","modified":1594977252816},{"_id":"themes/stun/scripts/tags/note.js","hash":"b436593a56e3bab8dd59c71e73ac9efbc8fa29d4","modified":1594977252816},{"_id":"themes/stun/scripts/tags/table.js","hash":"177061e1bfb296981a101643f51a27ccc1469307","modified":1594977252816},{"_id":"themes/stun/source/css/index.styl","hash":"8a75ec81fb064b0da2f978a064cc5bec2395f27d","modified":1594977252820},{"_id":"themes/stun/source/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1594977252816},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1594977252816},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1594977252816},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1594977252820},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1594977252820},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1594977252820},{"_id":"themes/stun/source/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1594977252820},{"_id":"themes/stun/source/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1594977252820},{"_id":"themes/stun/source/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1594977252824},{"_id":"themes/stun/source/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1594977252824},{"_id":"themes/stun/source/js/sidebar.js","hash":"a8d6c2411d226e885c3e3ebc9ed88555d8632406","modified":1594977252824},{"_id":"themes/stun/source/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1594977252824},{"_id":"themes/stun/source/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1594977252824},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/bfs.go","hash":"d204d66bc09f5d0d3edd79e27c135a9862e58892","modified":1609329408244},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/map.gif","hash":"785a1e4fcad1b504be94856ab39344ab518ceb10","modified":1609329408248},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/map.png","hash":"ceb390b6b73d3550cd511a9c931ba9e64a826eab","modified":1609329408248},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/广度优先搜索算法详解.md","hash":"73ef2fe986cc891a2d47fea777eca224f7742807","modified":1609332775796},{"_id":"source/_posts/DataStucture/DepthFistSearch/dfs.go","hash":"a06444aa9cd704fe45e318797c7b0033959debff","modified":1609329408264},{"_id":"source/_posts/DataStucture/DepthFistSearch/map.png","hash":"ceb390b6b73d3550cd511a9c931ba9e64a826eab","modified":1609329408268},{"_id":"source/_posts/DataStucture/DepthFistSearch/深度优先搜索算法详解.md","hash":"0980ad977079eb68ba48936f340d6d2403062bbd","modified":1609332756563},{"_id":"source/_posts/DataStucture/Queue/queue.go","hash":"e3401678d8f82a483166e283a134a205352271e6","modified":1609329408280},{"_id":"source/_posts/golang/bases/note.md","hash":"1bcfaf99d798dc15ec6c270b60166e60e47e97b6","modified":1594990346629},{"_id":"source/_posts/golang/characteristic/note.md","hash":"58f2b4c1751af4c1939a0c9cdce39ca578511291","modified":1594990346629},{"_id":"source/_posts/network/计算机网络笔记与思考/ISP的互联.jpg","hash":"899c5a6d43ae91e34244ccff4e7e41a98910d466","modified":1608457759811},{"_id":"themes/stun/docs/.vuepress/styles/index.styl","hash":"82767bfce39c705d788800dd46e1bcbc34d5f8e0","modified":1594977252816},{"_id":"themes/stun/docs/.vuepress/styles/palette.styl","hash":"de87beddf555a6e8573a6e3c4aa5147a6b12b745","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/advanced.md","hash":"fd06326895987f3b0182510df38db39631edee62","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/assist.md","hash":"88da5fda1f290c375f25edf99c7755a789c2e6ab","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/optimize.md","hash":"f01b537c98d81cdc6d083b9f63231f710ccbfddd","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/third-part.md","hash":"f6c9f0e432ff5e55adc26bdf52aba1f36a3aef85","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/contribute/contribute.md","hash":"e3d7431af4ca36743082acda66f69f0c1ab3edd3","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/guide/primary.md","hash":"782a98a755bf7a76b54ce61543fda1acbe02bc6a","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/guide/quick-start.md","hash":"eab5a8846af88127f67610b2439be47745fc400e","modified":1594977252816},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"80d2f4f8706a96b367ac1e89f5b56ada4684d571","modified":1594977252816},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"9a8e56bcc504f251c13ee3d0d18a08142fb7ee43","modified":1594977252816},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"c7909a6a50c7a76a6c1810b700a5d72bcb1e20c9","modified":1594977252816},{"_id":"themes/stun/layout/_partials/head/kill-old-ie.pug","hash":"427a95d02844f29e63c5e9f014ede3609aec1a5b","modified":1594977252816},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"7ecbe18da15d3a52c56f69c542540291b6178763","modified":1594977252816},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"c049078009aa251fc76cd948837c7a5efdd39cb2","modified":1594977252816},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"a147632c51b2d29f6fbcc471bb00d0acac2b5f54","modified":1594977252816},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1594977252816},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"2119ec20dc858d77d23bef5bac9b63a1fcbfdaf1","modified":1594977252816},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"bb72c81526958b6484979a73a8a80f0702bec795","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"48b7fedeb472bd01fd1f3317359a10e83ca919e1","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"5574a4989e5652bc3c0006bf0bceb95a3f64e1f0","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"0938c885697f6eb388b28ddbf88f5631d024fe73","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"6cda7866f9589c9ffc05ce4a3d7c33b706e70324","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/night-mode.pug","hash":"c7f9bd67cd231b9bd40a84123644e009ac8d8ef3","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/paginator.pug","hash":"b0045dcb9b151ee31f1db5b7d741f10ef3b74be0","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"c9081c1dcf0ca18df06d23638654d8f43b28d55c","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/share.pug","hash":"1bb3d25298b7ee6a28150aa286ed6b0ae42ead4f","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"bf86b2f9f4b1471afb8b31965d3230f6088682ae","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"e489020f1130976d3ec2245915ede6319d89b89c","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"1285cd65a873f688ae3c51846c1284447f502adc","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"f7300991a29dbe2e8091a588dfa8c65c3dee6302","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"78a4fc9c9380e31536f5b500638f2d005accd361","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"4eef66fbb8a8ad55e0868cf4b77a6b7bca0e7f35","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"0d72f844bf9532b3be644c27b0af7cb4331fc46c","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"f88fb0f085812db6023c30308ba3458da7742993","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"57bcbaac3d237d9168dd8f4b682f34351f11d250","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"c2a90e80c51b5b99e6804dbed5457a071b980bbd","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"08c98b031589a617b627ba0a9f778bf5f5217cd8","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"687f74a998519608944b40a41f3a98ccf4535139","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/minivaline.pug","hash":"5584ade7dd19deca418373115bde9d563d37d826","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/utterances.pug","hash":"6418baeb3aedcddb02a64bd89b26ac12e18551c8","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"b519a6948d6ef37c037385e3e3f9590c17f7ad62","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"e952be6c736545e73c0e02f833f87a4f8c5a2582","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"345c59fe76a7c83b529328e5144d1036cb14f533","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"72d51538cc85f01c8c64db74b9219ccaf334c9e9","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"54233748e22ceae063f70ee49b44c4bd0a78f391","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"0eac831a946875d24e5da185030121c445d859db","modified":1594977252816},{"_id":"themes/stun/source/css/_common/index.styl","hash":"86057db6cb18263866d62a6669feee8752882398","modified":1594977252820},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"618c6005f1bc7c482fa37ae3ce15729a64044d9d","modified":1594977252824},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"0d1adc70250941074c742f94f7801b3b43a7f1db","modified":1594977252824},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"f3060519f3acd05cb4b26bb5f6a5c6b857cb0d68","modified":1594977252820},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"c81aac4285eb058026b255e31282d35f55a820ab","modified":1594977252824},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1594977252820},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1594977252820},{"_id":"themes/stun/source/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1594977252820},{"_id":"source/_posts/DataStucture/DepthFistSearch/map.gif","hash":"f06b636fba3b8eab9bdde0b31a56aa8b4c807cc3","modified":1609329408268},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-192x192.png","hash":"98586e2072e13b6da61599f56c744dda333bd4f2","modified":1594977252816},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1594977252816},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"a54720db94121efd1a34ac88d344197c8206837e","modified":1594977252824},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"467d4171c0690a95d40fbecea02e6b212b7c74f1","modified":1594977252824},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"13b96f239de15e1cfdc14d9c80e6959506556dd2","modified":1594977252824},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"4064a7e2c3f71d2ed72a47edd60e9be01af6c354","modified":1594977252820},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"e750f2dae9eb3385039ee018ff8001b0e6ec3b64","modified":1594977252820},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"c15a9616fddb267431416304d709185aeb3d45f5","modified":1594977252820},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"7e62f34521ea539a25a101f25e1684e3a3ac4be8","modified":1594977252820},{"_id":"themes/stun/package-lock.json","hash":"16f46a3625daaac88dd39bf179215fa2e6c6c2a4","modified":1594977252812},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"d196c88ea2e9b851e8d8f9c5a315dfc2929eb897","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"339a43fd5ee97a77775b723118f6ab1af754fed4","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"14464841145cf3ecab66f1094653daa033c261eb","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"904af0e73cdf0767ec781271856d7b5b63e043ef","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"056e70f6dfe45ec50427d7ab293d33361c9b956f","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"bc0b01021a0d19b2c98f0c5c9fa1af96d67c1099","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"85848179cbc78152d2521b601ac9f888dea4e255","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"dfc99b05302f8203040431e563c9f63d63da46de","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"463a4e6a92ec5f757e167fbeb171e4e92e83a822","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"df732e267dfd9f1bda6a8cf1ede3198a205925f9","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/pages/timeline.styl","hash":"21e9c8def1613030f0927e2ce80f4ecc721f078e","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"bdb015173f8e5fa391fc4fb2b2a8d42787022c4b","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"c35d0cf421c6669ee0458c2f0264dca05769c01d","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"ae0ad9b44a87839d220792336478a9ae6db11c47","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"98cacc91e42f5e45279e2174a90ab26171085e2f","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"08aad11e329cda0550efef226e0c4d0bb4540454","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"d0ed844e28533f832cbd9b3f09203d16936628f7","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"db3d80c98b0007f6f96973758c817a825dac14a1","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"fb62e4baf25a66e46c27783be5d79353ec394b44","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"7d420651847366b1ce5f3b6aed6daf72ae4ab8c8","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1990d2c2a9bfe8e09d656f0c2ae6cf0c9f7f5542","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"e3406f962c1d77f356f5b32a0cc49c75e64ec80f","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"02138647437f7e8ee8927cae225d41072d936bdc","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"b3da5ea71a9947e781056d1bd7d42e4045fa2aca","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"71fd7b37c7a5b2ed4563fd530608d5a894444930","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"378961fa7c986e3313053814806902bf76204a93","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"1d28fc8f76f7164a306ed81a9ede21c0a2b0f7cd","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/ending.styl","hash":"63985ca9a3f6c481cc60207966fa1267de14d945","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"3d677c0323d77199bb9fbfefd65e97d8b882d7b3","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/font-icon.styl","hash":"bdda0953611378e93a8d6387cbdc93e1de4f7f0a","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"99b1cc42f38816083f93233778b299422b6d8f32","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"43de37ef3102c6a7fb9896fa747fc3cb797fd6e1","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"eced96235f0ff5dc6a8fd068d4ed05934a29b430","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"9f23e8762d01fb4a3cbf5e786fdead2926849e8a","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/night-mode.styl","hash":"9caeef13a913aba38976f082e1f0ca191bffc64e","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/paginator.styl","hash":"71ddb6a1e9664a4fde04a0ce143b8786ba6e0089","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"de1130ec3765879884cbdc77a15b458da6e37bcc","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/share.styl","hash":"fe32e3434107d92cefd7aacfdcef526a93c4b865","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"f0e37944168a74a64b18dc54c6fde2308e4bf023","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"40f832a199320642debabe32910c1168e3c6e40c","modified":1594977252824},{"_id":"source/images/header.jpg","hash":"82e4494fb2741a29fb1732bd57465072a176cc1c","modified":1594990346653},{"_id":"themes/stun/source/images/header.jpg","hash":"82e4494fb2741a29fb1732bd57465072a176cc1c","modified":1594977252816},{"_id":"source/images/menu.jpg","hash":"2ded4d0dbdada6877726a304df44b3c1e4bf30bf","modified":1594990346637},{"_id":"source/images/blogbk.jpg","hash":"2cff3b5e7e181c7666c2e6e3ed0ad3b3cdf960e3","modified":1594990346633},{"_id":"themes/stun/source/images/menu.jpg","hash":"2ded4d0dbdada6877726a304df44b3c1e4bf30bf","modified":1594977252820},{"_id":"source/_posts/DataStucture/Queue/queue","hash":"59da2114761b84d848e35c82d7adea4bc94b61f7","modified":1609329408280},{"_id":"themes/stun/source/images/blogbk.jpg","hash":"2cff3b5e7e181c7666c2e6e3ed0ad3b3cdf960e3","modified":1594977252820},{"_id":"source/_posts/DataStucture/DepthFistSearch/dfs","hash":"5ba0e0e7801e262a62b8602f04dc12792df6006b","modified":1609329408264},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/bfs","hash":"99134163ece880d88400f895fc9dabe6be9c7b67","modified":1609329408244},{"_id":"public/categories/index.html","hash":"92ba355b5ae914e91602e64bba6337a88bc0551d","modified":1609332810843},{"_id":"public/tags/index.html","hash":"c347f59660c9069169452a32d5522199a790e39b","modified":1609332810843},{"_id":"public/2020/08/09/network/计算机网络笔记与思考/index.html","hash":"4e66c9b9b8daa0a39a5e7b9d41b9805e262026cf","modified":1609332810843},{"_id":"public/2020/07/21/plan/learning-plan/index.html","hash":"18c6be0c095c14d8e3935feecad924200b9f205c","modified":1609332810843},{"_id":"public/2020/07/17/hello-world/index.html","hash":"5786db50d0e261ed688bcd15aff1e495388a56dd","modified":1609332810843},{"_id":"public/2020/07/17/golang/characteristic/note/index.html","hash":"ef74d336dd673b8930bdf547d2e01a74ff9a99cd","modified":1609332810843},{"_id":"public/2020/07/16/helloworld/index.html","hash":"9fef6f7416a82388a830a6082e689c0725928acf","modified":1609332810843},{"_id":"public/archives/index.html","hash":"315b27449c30238c56b0f569f6ede893e20653a2","modified":1609332810843},{"_id":"public/archives/2020/index.html","hash":"ba0f12a0f7291b19ae8586c640f4daf62b3c78f6","modified":1609332810843},{"_id":"public/archives/2020/07/index.html","hash":"aa92fbb8f041797bd8e7a9731ba2896ea11aa1f5","modified":1609332810843},{"_id":"public/archives/2020/08/index.html","hash":"92d23489de706cc2fb10b7ff16481acb1ee6a527","modified":1609332810843},{"_id":"public/categories/computer-network/index.html","hash":"f9536d80bdd94be19f3abd087209b73e1d1b729f","modified":1609332810843},{"_id":"public/categories/plan/index.html","hash":"4003f40dff9b9b955b2c7d405e1cc91494ac8e51","modified":1609332810843},{"_id":"public/categories/datastruct/index.html","hash":"c532d216e91630a422c0045695e1166100d2256a","modified":1609332810843},{"_id":"public/categories/golang/index.html","hash":"fbe6edf9231f1130152a1c4cfa994dd907b7d8f1","modified":1609332810843},{"_id":"public/categories/datastruct/algorithml/index.html","hash":"6ce89e1d94cdfb87477c2a6395470b5dc2feba85","modified":1609332810843},{"_id":"public/categories/datastruct/algorithm/index.html","hash":"51a1324a7d144e4e6e07e9dda11cf50f57927423","modified":1609332810843},{"_id":"public/categories/golang/base/index.html","hash":"9ac95adfbaf1133f94a04fdd8df20d7d228a4330","modified":1609332810843},{"_id":"public/categories/golang/characteristic/index.html","hash":"6245640908586dc65a6714902981015b998a5f83","modified":1609332810843},{"_id":"public/tags/computer-network/index.html","hash":"8c1c40aa23394f7f6e6b781c9dd961be96d8d863","modified":1609332810843},{"_id":"public/tags/learning-plan/index.html","hash":"5b8d321d7370f98d79766e36def5351a7aafdbe4","modified":1609332810843},{"_id":"public/tags/algorithm/index.html","hash":"7f33ebbee83cea90997a114bed2c32407c0eb95a","modified":1609332810843},{"_id":"public/tags/programming-language/index.html","hash":"fbbb3e7a25490dbccfd6ef9bc323f178dba150f1","modified":1609332810843},{"_id":"public/tags/golang/index.html","hash":"2424b3be74d467024754f9825dafa7391d4c89cf","modified":1609332810843},{"_id":"public/2020/07/17/golang/bases/note/index.html","hash":"729ecca0ec5db16f84fd07e5a542990bf51d4a87","modified":1609332810843},{"_id":"public/2020/07/17/DataStucture/BreadthFirstSearch/广度优先搜索算法详解/index.html","hash":"afa67bd52ee64464eb4994d8d4039c0dc5084607","modified":1609332810843},{"_id":"public/2020/07/17/DataStucture/DepthFistSearch/深度优先搜索算法详解/index.html","hash":"54de254fdd58ac961dfb878e95312808ff5a9469","modified":1609332810843},{"_id":"public/index.html","hash":"30e62ae1747fa47260b8f78dfe64f22eaa7067bb","modified":1609332810843},{"_id":"public/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1609332810843},{"_id":"public/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1609332810843},{"_id":"public/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1609332810843},{"_id":"public/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1609332810843},{"_id":"public/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1609332810843},{"_id":"public/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1609332810843},{"_id":"public/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1609332810843},{"_id":"public/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1609332810843},{"_id":"public/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1609332810843},{"_id":"public/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1609332810843},{"_id":"public/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1609332810843},{"_id":"public/2020/08/09/network/计算机网络笔记与思考/ISP的互联.jpg","hash":"899c5a6d43ae91e34244ccff4e7e41a98910d466","modified":1609332810843},{"_id":"public/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1609332810843},{"_id":"public/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1609332810843},{"_id":"public/js/sidebar.js","hash":"a8d6c2411d226e885c3e3ebc9ed88555d8632406","modified":1609332810843},{"_id":"public/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1609332810843},{"_id":"public/css/index.css","hash":"9dfd293a9e000edf52ba2560519950b42d2ff825","modified":1609332810843},{"_id":"public/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1609332810843},{"_id":"public/images/header.jpg","hash":"82e4494fb2741a29fb1732bd57465072a176cc1c","modified":1609332810843},{"_id":"public/images/menu.jpg","hash":"2ded4d0dbdada6877726a304df44b3c1e4bf30bf","modified":1609332810843},{"_id":"public/images/blogbk.jpg","hash":"2cff3b5e7e181c7666c2e6e3ed0ad3b3cdf960e3","modified":1609332810843}],"Category":[{"name":"computer network","_id":"ckjbf7gm30007xylzaiph26yf"},{"name":"plan","_id":"ckjbf7gm60009xylz6aut4q2p"},{"name":"datastruct","_id":"ckjbf7h25000ixylzfdou6nvn"},{"name":"golang","_id":"ckjbf7h2b000oxylz6q0b9qls"},{"name":"algorithml","parent":"ckjbf7h25000ixylzfdou6nvn","_id":"ckjbf7h2e000sxylz3shuapab"},{"name":"algorithm","parent":"ckjbf7h25000ixylzfdou6nvn","_id":"ckjbf7h2g000xxylzgm7ogk4s"},{"name":"base","parent":"ckjbf7h2b000oxylz6q0b9qls","_id":"ckjbf7h2h000yxylzcjbte2bp"},{"name":"characteristic","parent":"ckjbf7h2b000oxylz6q0b9qls","_id":"ckjbf7h2i0013xylz3084biaw"}],"Data":[{"_id":"stun","data":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null}}}],"Page":[{"title":"categories","type":"categories","date":"2020-07-17T02:10:02.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ndate: 2020-07-17 10:10:02\n---\n","updated":"2020-07-17T12:52:26.629Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckjbf7gge0001xylzd3ejhds4","content":"","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2020-07-17T02:10:11.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ndate: 2020-07-17 10:10:11\n---\n","updated":"2020-07-17T12:52:26.653Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckjbf7ggh0003xylzersy7r87","content":"","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-17T09:09:49.247Z","updated":"2020-07-17T09:09:49.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7gg60000xylzgx12echl","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Quick Start</h2>\n      \n        <h3 id=\"Create-a-new-post\"   >\n          <a href=\"#Create-a-new-post\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Create a new post</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n\n        <h3 id=\"Run-server\"   >\n          <a href=\"#Run-server\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Run server</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n\n        <h3 id=\"Generate-static-files\"   >\n          <a href=\"#Generate-static-files\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Generate static files</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n\n        <h3 id=\"Deploy-to-remote-sites\"   >\n          <a href=\"#Deploy-to-remote-sites\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Deploy to remote sites</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Quick Start</h2>\n      \n        <h3 id=\"Create-a-new-post\"   >\n          <a href=\"#Create-a-new-post\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Create a new post</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n\n        <h3 id=\"Run-server\"   >\n          <a href=\"#Run-server\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Run server</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n\n        <h3 id=\"Generate-static-files\"   >\n          <a href=\"#Generate-static-files\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Generate static files</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n\n        <h3 id=\"Deploy-to-remote-sites\"   >\n          <a href=\"#Deploy-to-remote-sites\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Deploy to remote sites</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"页面生成测试","date":"2020-07-16T02:27:41.000Z","_content":"\n## 这是一篇测试文档\n```C\nint main()\n{\n    printf(\"hello world\\r\\n\");\n}\n```\n\n\n","source":"_posts/helloworld.md","raw":"---\ntitle: 页面生成测试\ndate: 2020-07-16 10:27:41\ntags:\n---\n\n## 这是一篇测试文档\n```C\nint main()\n{\n    printf(\"hello world\\r\\n\");\n}\n```\n\n\n","slug":"helloworld","published":1,"updated":"2020-07-17T12:52:26.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7ggf0002xylz2bgiaedi","content":"\n        <h2 id=\"这是一篇测试文档\"   >\n          <a href=\"#这是一篇测试文档\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>这是一篇测试文档</h2>\n      <figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\r\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h2 id=\"这是一篇测试文档\"   >\n          <a href=\"#这是一篇测试文档\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>这是一篇测试文档</h2>\n      <figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\r\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n"},{"title":"计算机网络笔记与思考","date":"2020-08-09T09:00:07.000Z","_content":"\n## 什么是因特网？\n\n对于这个问题，*《计算机网络自顶向下方法》*一书中给出了如下两种回答该问题的方式：\n\n*“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”*\n\n*“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”*\n\n\n\n## 网络的网络\n\n构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。\n\n**网络结构1**，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。\n\n**网络结构2**，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。\n\n**网络结构3**，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。\n\n**网络结构4**，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。\n\n**网络结构5**，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。\n\n","source":"_posts/network/计算机网络笔记与思考.md","raw":"---\ntitle: 计算机网络笔记与思考\ndate: 2020-08-09 17:00:07\ncategories:\n- [computer network]\ntags:\n- computer_network\n---\n\n## 什么是因特网？\n\n对于这个问题，*《计算机网络自顶向下方法》*一书中给出了如下两种回答该问题的方式：\n\n*“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”*\n\n*“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”*\n\n\n\n## 网络的网络\n\n构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。\n\n**网络结构1**，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。\n\n**网络结构2**，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。\n\n**网络结构3**，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。\n\n**网络结构4**，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。\n\n**网络结构5**，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。\n\n","slug":"network/计算机网络笔记与思考","published":1,"updated":"2020-12-29T12:10:30.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7gly0004xylz2e9aeyc9","content":"\n        <h2 id=\"什么是因特网？\"   >\n          <a href=\"#什么是因特网？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是因特网？</h2>\n      <p>对于这个问题，<em>《计算机网络自顶向下方法》</em>一书中给出了如下两种回答该问题的方式：</p>\n<p><em>“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”</em></p>\n<p><em>“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”</em></p>\n\n        <h2 id=\"网络的网络\"   >\n          <a href=\"#网络的网络\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>网络的网络</h2>\n      <p>构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。</p>\n<p><strong>网络结构1</strong>，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。</p>\n<p><strong>网络结构2</strong>，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。</p>\n<p><strong>网络结构3</strong>，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。</p>\n<p><strong>网络结构4</strong>，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。</p>\n<p><strong>网络结构5</strong>，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。</p>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h2 id=\"什么是因特网？\"   >\n          <a href=\"#什么是因特网？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是因特网？</h2>\n      <p>对于这个问题，<em>《计算机网络自顶向下方法》</em>一书中给出了如下两种回答该问题的方式：</p>\n<p><em>“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”</em></p>\n<p><em>“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”</em></p>\n\n        <h2 id=\"网络的网络\"   >\n          <a href=\"#网络的网络\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>网络的网络</h2>\n      <p>构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。</p>\n<p><strong>网络结构1</strong>，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。</p>\n<p><strong>网络结构2</strong>，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。</p>\n<p><strong>网络结构3</strong>，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。</p>\n<p><strong>网络结构4</strong>，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。</p>\n<p><strong>网络结构5</strong>，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。</p>\n"},{"title":"learning_plan","date":"2020-07-21T12:37:32.000Z","_content":"\n# Learning Plan\n\n理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。\n\n| 时间      | 内容                                                         |\n| --------- | ------------------------------------------------------------ |\n| 7.26-7.31 | 过一遍HTTP权威指南，主要是要达到以下几个目的：               |\n|           | 1. 了解 HTTP 当前的应用场景                                  |\n|           | 2. 理解 网关、中继、等网络通信组件的作用                     |\n|           | 3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂 |\n|           |                                                              |\n| 8.1-8.15  | 以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;    |\n|           | 主要目的是了解计算机网络体系的基本组件及设计框架。           |\n| 8.16-8.21 | 对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主： |\n|           | 1. GO语言的包组织的形式及模块管理                            |\n|           | 2. GO语言的多进程编程                                        |\n| 8.22-9.25 | 主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。 |\n| 9.25 - [] | 从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情： |\n|           | 1. 回顾一些重要的数据结构                                    |\n|           | 2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理      |\n|           | 3. 刷刷题整理简历资料，准备投向我中意的公司                  |\n|           |                                                              |\n\n\n\n","source":"_posts/plan/learning-plan.md","raw":"---\ntitle: learning_plan\ndate: 2020-07-21 20:37:32\ncategories:\n- plan\ntags:\n- learning-plan\n---\n\n# Learning Plan\n\n理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。\n\n| 时间      | 内容                                                         |\n| --------- | ------------------------------------------------------------ |\n| 7.26-7.31 | 过一遍HTTP权威指南，主要是要达到以下几个目的：               |\n|           | 1. 了解 HTTP 当前的应用场景                                  |\n|           | 2. 理解 网关、中继、等网络通信组件的作用                     |\n|           | 3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂 |\n|           |                                                              |\n| 8.1-8.15  | 以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;    |\n|           | 主要目的是了解计算机网络体系的基本组件及设计框架。           |\n| 8.16-8.21 | 对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主： |\n|           | 1. GO语言的包组织的形式及模块管理                            |\n|           | 2. GO语言的多进程编程                                        |\n| 8.22-9.25 | 主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。 |\n| 9.25 - [] | 从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情： |\n|           | 1. 回顾一些重要的数据结构                                    |\n|           | 2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理      |\n|           | 3. 刷刷题整理简历资料，准备投向我中意的公司                  |\n|           |                                                              |\n\n\n\n","slug":"plan/learning-plan","published":1,"updated":"2020-12-20T09:49:19.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7glz0005xylzhlm9bxv0","content":"\n        <h1 id=\"Learning-Plan\"   >\n          <a href=\"#Learning-Plan\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Learning Plan</h1>\n      <p>理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>时间</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7.26-7.31</td>\n<td>过一遍HTTP权威指南，主要是要达到以下几个目的：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 了解 HTTP 当前的应用场景</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 理解 网关、中继、等网络通信组件的作用</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.1-8.15</td>\n<td>以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;</td>\n</tr>\n<tr>\n<td></td>\n<td>主要目的是了解计算机网络体系的基本组件及设计框架。</td>\n</tr>\n<tr>\n<td>8.16-8.21</td>\n<td>对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. GO语言的包组织的形式及模块管理</td>\n</tr>\n<tr>\n<td></td>\n<td>2. GO语言的多进程编程</td>\n</tr>\n<tr>\n<td>8.22-9.25</td>\n<td>主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。</td>\n</tr>\n<tr>\n<td>9.25 - []</td>\n<td>从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 回顾一些重要的数据结构</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 刷刷题整理简历资料，准备投向我中意的公司</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h1 id=\"Learning-Plan\"   >\n          <a href=\"#Learning-Plan\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Learning Plan</h1>\n      <p>理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>时间</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7.26-7.31</td>\n<td>过一遍HTTP权威指南，主要是要达到以下几个目的：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 了解 HTTP 当前的应用场景</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 理解 网关、中继、等网络通信组件的作用</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.1-8.15</td>\n<td>以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;</td>\n</tr>\n<tr>\n<td></td>\n<td>主要目的是了解计算机网络体系的基本组件及设计框架。</td>\n</tr>\n<tr>\n<td>8.16-8.21</td>\n<td>对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. GO语言的包组织的形式及模块管理</td>\n</tr>\n<tr>\n<td></td>\n<td>2. GO语言的多进程编程</td>\n</tr>\n<tr>\n<td>8.22-9.25</td>\n<td>主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。</td>\n</tr>\n<tr>\n<td>9.25 - []</td>\n<td>从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 回顾一些重要的数据结构</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 刷刷题整理简历资料，准备投向我中意的公司</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n"},{"title":"广度优先搜索算法详解","date":"2020-07-17T03:56:11.000Z","_content":"\n#### 广度优先搜索算法核心思想\n```\n与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。\n广度优先搜索的主要思想是：\n\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。\n```\n\n#### 演示效果\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true)\n\n\n\n#### 以找迷宫出口类的题目为示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n/*=================== 队列结构 ==========================*/\ntype note struct{\n\tx \t\tint\n\ty \t\tint \n\tfather  int //父亲在队列中的编号\n\tstep \tint //步数\n}\n\ntype Queue struct{\n\tdata\t[26]note\n\thead\tint\n\ttail\tint\n}\n\nfunc (q *Queue) Put(x int, y int, s int) {\n\tq.data[q.tail].x = x\n\tq.data[q.tail].y = y\n\tq.data[q.tail].step = s\n\tq.tail += 1\n}\n\nfunc (q *Queue) Get() (int,int,int) {\n\tvar x,y,s int\n\tx = q.data[q.head].x\n\ty = q.data[q.head].y\n\ts = q.data[q.head].step\n\tq.head++\n\treturn x,y,s\n}\n\nfunc (q *Queue) IsEmpty() bool{\n\tif q.head ==  q.tail {\n\t\treturn true\n\t}else if q.head > q.tail {\n\t\treturn false\n\t}else if q.head < q.tail {\n\t\treturn false\n\t}\n\treturn false\n}\n\n/*============================ 地图类 ==================================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end ===================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//搜索结束点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n//全局数据\nvar book[51][51]int\t//已搜索点记录\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//广度优先搜索算法实现\nfunc bfs(m *Map,queue *Queue) {\n\n\t//var startx,starty,step,flag int\n\tflag := 0\t//标记是否到达目的地\n\n\tfor ; !queue.IsEmpty(); {\n\t\tstartx,starty,step := queue.Get()\n\t\tfor k := 0; k <= 3; k++ {\n\t\t\tnextx := startx + next[k][0]\n\t\t\tnexty := starty + next[k][1]\n\n\t\t\t/*==== 绘制搜索路线相应存图 =====*/\n\t\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*=====  end  =====*/\n\n\t\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 {\n\t\t\t\tbook[nextx][nexty] = 1\n\t\t\t\tqueue.Put( nextx, nexty, step+1 )\n\n\n\t\t\t\t/*==== 绘制当前搜索点图像 =====*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 3 {\n\t\t\t\tflag = 1;\n\n\t\t\t\t/*======= 绘制搜索终点图 =======*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,3)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tif flag == 1 {\n\t\t\tbreak;\n\t\t}\t\n\t}\n}\n\n\nfunc main(){\n\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\tvar queue Queue\n\n\tqueue.Put(0,0,1)\t//设置入口点\n\tbook[0][0] = 1\n\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbfs(&MazeMap,&queue)\n\n\tfmt.Println(queue.Get())\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n","source":"_posts/DataStucture/BreadthFirstSearch/广度优先搜索算法详解.md","raw":"---\ntitle: 广度优先搜索算法详解\ndate: 2020-07-17 11:56:11\ncategories:\n  - [datastruct, algorithml]\ntags:\n  - algorithm\n---\n\n#### 广度优先搜索算法核心思想\n```\n与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。\n广度优先搜索的主要思想是：\n\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。\n```\n\n#### 演示效果\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true)\n\n\n\n#### 以找迷宫出口类的题目为示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n/*=================== 队列结构 ==========================*/\ntype note struct{\n\tx \t\tint\n\ty \t\tint \n\tfather  int //父亲在队列中的编号\n\tstep \tint //步数\n}\n\ntype Queue struct{\n\tdata\t[26]note\n\thead\tint\n\ttail\tint\n}\n\nfunc (q *Queue) Put(x int, y int, s int) {\n\tq.data[q.tail].x = x\n\tq.data[q.tail].y = y\n\tq.data[q.tail].step = s\n\tq.tail += 1\n}\n\nfunc (q *Queue) Get() (int,int,int) {\n\tvar x,y,s int\n\tx = q.data[q.head].x\n\ty = q.data[q.head].y\n\ts = q.data[q.head].step\n\tq.head++\n\treturn x,y,s\n}\n\nfunc (q *Queue) IsEmpty() bool{\n\tif q.head ==  q.tail {\n\t\treturn true\n\t}else if q.head > q.tail {\n\t\treturn false\n\t}else if q.head < q.tail {\n\t\treturn false\n\t}\n\treturn false\n}\n\n/*============================ 地图类 ==================================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end ===================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//搜索结束点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n//全局数据\nvar book[51][51]int\t//已搜索点记录\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//广度优先搜索算法实现\nfunc bfs(m *Map,queue *Queue) {\n\n\t//var startx,starty,step,flag int\n\tflag := 0\t//标记是否到达目的地\n\n\tfor ; !queue.IsEmpty(); {\n\t\tstartx,starty,step := queue.Get()\n\t\tfor k := 0; k <= 3; k++ {\n\t\t\tnextx := startx + next[k][0]\n\t\t\tnexty := starty + next[k][1]\n\n\t\t\t/*==== 绘制搜索路线相应存图 =====*/\n\t\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*=====  end  =====*/\n\n\t\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 {\n\t\t\t\tbook[nextx][nexty] = 1\n\t\t\t\tqueue.Put( nextx, nexty, step+1 )\n\n\n\t\t\t\t/*==== 绘制当前搜索点图像 =====*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 3 {\n\t\t\t\tflag = 1;\n\n\t\t\t\t/*======= 绘制搜索终点图 =======*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,3)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tif flag == 1 {\n\t\t\tbreak;\n\t\t}\t\n\t}\n}\n\n\nfunc main(){\n\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\tvar queue Queue\n\n\tqueue.Put(0,0,1)\t//设置入口点\n\tbook[0][0] = 1\n\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbfs(&MazeMap,&queue)\n\n\tfmt.Println(queue.Get())\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n","slug":"DataStucture/BreadthFirstSearch/广度优先搜索算法详解","published":1,"updated":"2020-12-30T12:52:55.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7h21000exylzcnm0c1s9","content":"\n        <h4 id=\"广度优先搜索算法核心思想\"   >\n          <a href=\"#广度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>广度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。</span><br><span class=\"line\">广度优先搜索的主要思想是：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示效果\"   >\n          <a href=\"#演示效果\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示效果</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"以找迷宫出口类的题目为示例\"   >\n          <a href=\"#以找迷宫出口类的题目为示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>以找迷宫出口类的题目为示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=================== 队列结构 ==========================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> note <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tx \t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ty \t\t<span class=\"keyword\">int</span> </span><br><span class=\"line\">\tfather  <span class=\"keyword\">int</span> <span class=\"comment\">//父亲在队列中的编号</span></span><br><span class=\"line\">\tstep \t<span class=\"keyword\">int</span> <span class=\"comment\">//步数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tdata\t[<span class=\"number\">26</span>]note</span><br><span class=\"line\">\thead\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttail\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Put</span><span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, s <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tq.data[q.tail].x = x</span><br><span class=\"line\">\tq.data[q.tail].y = y</span><br><span class=\"line\">\tq.data[q.tail].step = s</span><br><span class=\"line\">\tq.tail += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Get</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x,y,s <span class=\"keyword\">int</span></span><br><span class=\"line\">\tx = q.data[q.head].x</span><br><span class=\"line\">\ty = q.data[q.head].y</span><br><span class=\"line\">\ts = q.data[q.head].step</span><br><span class=\"line\">\tq.head++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x,y,s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">IsEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> q.head ==  q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &gt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &lt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ 地图类 ==================================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end ===================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//搜索结束点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//已搜索点记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bfs</span><span class=\"params\">(m *Map,queue *Queue)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//var startx,starty,step,flag int</span></span><br><span class=\"line\">\tflag := <span class=\"number\">0</span>\t<span class=\"comment\">//标记是否到达目的地</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; !queue.IsEmpty(); &#123;</span><br><span class=\"line\">\t\tstartx,starty,step := queue.Get()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\t\tnextx := startx + next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\tnexty := starty + next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制搜索路线相应存图 =====*/</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tqueue.Put( nextx, nexty, step+<span class=\"number\">1</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*==== 绘制当前搜索点图像 =====*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*======= 绘制搜索终点图 =======*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">3</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> flag == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue Queue</span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue.Put(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)\t<span class=\"comment\">//设置入口点</span></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbfs(&amp;MazeMap,&amp;queue)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(queue.Get())</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h4 id=\"广度优先搜索算法核心思想\"   >\n          <a href=\"#广度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>广度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。</span><br><span class=\"line\">广度优先搜索的主要思想是：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示效果\"   >\n          <a href=\"#演示效果\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示效果</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"以找迷宫出口类的题目为示例\"   >\n          <a href=\"#以找迷宫出口类的题目为示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>以找迷宫出口类的题目为示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=================== 队列结构 ==========================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> note <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tx \t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ty \t\t<span class=\"keyword\">int</span> </span><br><span class=\"line\">\tfather  <span class=\"keyword\">int</span> <span class=\"comment\">//父亲在队列中的编号</span></span><br><span class=\"line\">\tstep \t<span class=\"keyword\">int</span> <span class=\"comment\">//步数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tdata\t[<span class=\"number\">26</span>]note</span><br><span class=\"line\">\thead\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttail\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Put</span><span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, s <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tq.data[q.tail].x = x</span><br><span class=\"line\">\tq.data[q.tail].y = y</span><br><span class=\"line\">\tq.data[q.tail].step = s</span><br><span class=\"line\">\tq.tail += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Get</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x,y,s <span class=\"keyword\">int</span></span><br><span class=\"line\">\tx = q.data[q.head].x</span><br><span class=\"line\">\ty = q.data[q.head].y</span><br><span class=\"line\">\ts = q.data[q.head].step</span><br><span class=\"line\">\tq.head++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x,y,s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">IsEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> q.head ==  q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &gt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &lt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ 地图类 ==================================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end ===================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//搜索结束点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//已搜索点记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bfs</span><span class=\"params\">(m *Map,queue *Queue)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//var startx,starty,step,flag int</span></span><br><span class=\"line\">\tflag := <span class=\"number\">0</span>\t<span class=\"comment\">//标记是否到达目的地</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; !queue.IsEmpty(); &#123;</span><br><span class=\"line\">\t\tstartx,starty,step := queue.Get()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\t\tnextx := startx + next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\tnexty := starty + next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制搜索路线相应存图 =====*/</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tqueue.Put( nextx, nexty, step+<span class=\"number\">1</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*==== 绘制当前搜索点图像 =====*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*======= 绘制搜索终点图 =======*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">3</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> flag == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue Queue</span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue.Put(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)\t<span class=\"comment\">//设置入口点</span></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbfs(&amp;MazeMap,&amp;queue)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(queue.Get())</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n"},{"title":"深度优先搜索算法详解","date":"2020-07-17T03:56:11.000Z","_content":"\n#### 深度优先搜索算法核心思想\n```\n深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。\n深度优先搜索算法的核心思想：\n\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。\n\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。\n```\n\n#### 演示动图\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true)\n\n\n\n#### 深度优先搜索算法示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n\n/*================================== 地图类 ==============================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end =======================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//回退点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n\n/*========================= 骑士救公主 ^v^ ===============================*/\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n// 深度优先搜索算法实现\nvar min int = 99999\t\t//最短路径\nvar book [5][4]int\t\t//已行进坐标记录\n\nfunc dfs(m *Map , x int, y int, step int, counter int) {\n\tvar nextx,nexty int \n\t\n\tif m.Entinexty[x][y] == 3 {\n\t\tif step < min {\n\t\t\tmin = step\n\t\t} \n\t\treturn \n\t}\n\n\t//枚举4种走法\n\tfor k := 0; k <= 3; k++ {\n\t\tnextx = x+next[k][0]\n\t\tnexty = y+next[k][1]\n\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\t//越界\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\t/*==== 分别为前进、后退绘制相应存图 =====*/\n\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\trollbackImg[forwardCounter].SquareLen = 60\n\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\trollbackImg[forwardCounter].Entinexty = MapArr\t\n\t\trollbackImg[forwardCounter].DrawTheMap()\n\n\n\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*=====  end  =====*/\n\n\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 || \n\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == 3 {\n\t\t\tbook[nextx][nexty] = 1\t//记录当前路径\n\n\t\t\t/*==== 绘制前进图像 =====*/\n\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\tforwardCounter += 1\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =====*/\n\n\t\t\tdfs(m,nextx,nexty,step+1,forwardCounter)\n\t\t\t\n\t\t\t/*======= 绘制回退图像 =======*/\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,2)\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,3)\n\t\t\tanim.Image = append(anim.Image,rollbackImg[rollbackCounter].MapImage)\n\t\t\trollbackCounter += 1;\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =======*/\n\n\t\t\tbook[nextx][nexty] = 0\t//回退路径\n\t\t}\n\t}\n\treturn \n}\n\nfunc main(){\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\t//初始化地图数据\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbook[0][0] = 1\n\tdfs(&MazeMap,0,0,0,forwardCounter)\n\tfmt.Println(min)\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n","source":"_posts/DataStucture/DepthFistSearch/深度优先搜索算法详解.md","raw":"---\ntitle: 深度优先搜索算法详解\ndate: 2020-07-17 11:56:11\ncategories:\n  - [datastruct, algorithm]\ntags:\n  - algorithm\n---\n\n#### 深度优先搜索算法核心思想\n```\n深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。\n深度优先搜索算法的核心思想：\n\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。\n\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。\n```\n\n#### 演示动图\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true)\n\n\n\n#### 深度优先搜索算法示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n\n/*================================== 地图类 ==============================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end =======================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//回退点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n\n/*========================= 骑士救公主 ^v^ ===============================*/\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n// 深度优先搜索算法实现\nvar min int = 99999\t\t//最短路径\nvar book [5][4]int\t\t//已行进坐标记录\n\nfunc dfs(m *Map , x int, y int, step int, counter int) {\n\tvar nextx,nexty int \n\t\n\tif m.Entinexty[x][y] == 3 {\n\t\tif step < min {\n\t\t\tmin = step\n\t\t} \n\t\treturn \n\t}\n\n\t//枚举4种走法\n\tfor k := 0; k <= 3; k++ {\n\t\tnextx = x+next[k][0]\n\t\tnexty = y+next[k][1]\n\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\t//越界\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\t/*==== 分别为前进、后退绘制相应存图 =====*/\n\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\trollbackImg[forwardCounter].SquareLen = 60\n\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\trollbackImg[forwardCounter].Entinexty = MapArr\t\n\t\trollbackImg[forwardCounter].DrawTheMap()\n\n\n\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*=====  end  =====*/\n\n\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 || \n\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == 3 {\n\t\t\tbook[nextx][nexty] = 1\t//记录当前路径\n\n\t\t\t/*==== 绘制前进图像 =====*/\n\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\tforwardCounter += 1\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =====*/\n\n\t\t\tdfs(m,nextx,nexty,step+1,forwardCounter)\n\t\t\t\n\t\t\t/*======= 绘制回退图像 =======*/\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,2)\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,3)\n\t\t\tanim.Image = append(anim.Image,rollbackImg[rollbackCounter].MapImage)\n\t\t\trollbackCounter += 1;\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =======*/\n\n\t\t\tbook[nextx][nexty] = 0\t//回退路径\n\t\t}\n\t}\n\treturn \n}\n\nfunc main(){\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\t//初始化地图数据\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbook[0][0] = 1\n\tdfs(&MazeMap,0,0,0,forwardCounter)\n\tfmt.Println(min)\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n","slug":"DataStucture/DepthFistSearch/深度优先搜索算法详解","published":1,"updated":"2020-12-30T12:52:36.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7h22000fxylz4u4221lp","content":"\n        <h4 id=\"深度优先搜索算法核心思想\"   >\n          <a href=\"#深度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。</span><br><span class=\"line\">深度优先搜索算法的核心思想：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。</span><br><span class=\"line\">\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示动图\"   >\n          <a href=\"#演示动图\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示动图</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"深度优先搜索算法示例\"   >\n          <a href=\"#深度优先搜索算法示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*================================== 地图类 ==============================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end =======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//回退点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*========================= 骑士救公主 ^v^ ===============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> min <span class=\"keyword\">int</span> = <span class=\"number\">99999</span>\t\t<span class=\"comment\">//最短路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t\t<span class=\"comment\">//已行进坐标记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(m *Map , x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, step <span class=\"keyword\">int</span>, counter <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextx,nexty <span class=\"keyword\">int</span> </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> m.Entinexty[x][y] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> step &lt; min &#123;</span><br><span class=\"line\">\t\t\tmin = step</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//枚举4种走法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\tnextx = x+next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tnexty = y+next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;\t<span class=\"comment\">//越界</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*==== 分别为前进、后退绘制相应存图 =====*/</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> || </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span>\t<span class=\"comment\">//记录当前路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制前进图像 =====*/</span></span><br><span class=\"line\">\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdfs(m,nextx,nexty,step+<span class=\"number\">1</span>,forwardCounter)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*======= 绘制回退图像 =======*/</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,<span class=\"number\">2</span>)\t\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,<span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,rollbackImg[rollbackCounter].MapImage)</span><br><span class=\"line\">\t\t\trollbackCounter += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =======*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"comment\">//初始化地图数据</span></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tdfs(&amp;MazeMap,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,forwardCounter)</span><br><span class=\"line\">\tfmt.Println(min)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h4 id=\"深度优先搜索算法核心思想\"   >\n          <a href=\"#深度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。</span><br><span class=\"line\">深度优先搜索算法的核心思想：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。</span><br><span class=\"line\">\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示动图\"   >\n          <a href=\"#演示动图\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示动图</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"深度优先搜索算法示例\"   >\n          <a href=\"#深度优先搜索算法示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*================================== 地图类 ==============================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end =======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//回退点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*========================= 骑士救公主 ^v^ ===============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> min <span class=\"keyword\">int</span> = <span class=\"number\">99999</span>\t\t<span class=\"comment\">//最短路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t\t<span class=\"comment\">//已行进坐标记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(m *Map , x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, step <span class=\"keyword\">int</span>, counter <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextx,nexty <span class=\"keyword\">int</span> </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> m.Entinexty[x][y] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> step &lt; min &#123;</span><br><span class=\"line\">\t\t\tmin = step</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//枚举4种走法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\tnextx = x+next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tnexty = y+next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;\t<span class=\"comment\">//越界</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*==== 分别为前进、后退绘制相应存图 =====*/</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> || </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span>\t<span class=\"comment\">//记录当前路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制前进图像 =====*/</span></span><br><span class=\"line\">\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdfs(m,nextx,nexty,step+<span class=\"number\">1</span>,forwardCounter)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*======= 绘制回退图像 =======*/</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,<span class=\"number\">2</span>)\t\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,<span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,rollbackImg[rollbackCounter].MapImage)</span><br><span class=\"line\">\t\t\trollbackCounter += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =======*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"comment\">//初始化地图数据</span></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tdfs(&amp;MazeMap,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,forwardCounter)</span><br><span class=\"line\">\tfmt.Println(min)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n"},{"title":"Golang - 基础骨架","_content":"\n# GOLANG\n\n#### GO语言的特性\n\n1. GO语言是按值调用语言。\n\n2. GO是面向函数的语言，仅管它允许面向对象风格的编程。\n\n   它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。\n\n   具体表现为：结构体嵌套，为类型定义方法，接口等\n\n3. 就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。\n\n\n\n#### GO语言的实用功能包\n\n1. golang.org/x/net/html:\n\n它提供了解析HTML的功能。\n\n2. \n\n\n\n#### 变量\n\n* 短变量声明\n\n一个容易被忽略但重要的地方是：\n\n短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。\n\n在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。\n\n```go\nin,err := os.Open(infile)\n//下面的语句和第二条语句联系一起看\nout,err := os.Create(outfile)\n```\n\n短变量声明最少声明一个新变量，否则编译不通过。\n\n\n\n#### slice\n\n```go\n//slice操作符s[i:j]\n//数据结构如下\n// src/runtime/slice.go(go.19.1)\ntype slice struct{\n    array unsafe.Pointer //指向底层数组的指针\n    len int //slice元素数量\n    cap int //底层数组的容量\n}\n```\n\n1. 如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。\n\n2. 和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。\n3. slice需要做深度比较，因此不能用slice作为map的键。\n4. slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。\n\n\n\n#### map\n\n```go\n//创建一个map\nages = make(map[string]int) //创建了一个键为string值为int的map\n//初始化\nages := map[string]int{\n\t\"alice\":31,\n\t\"charlie\":34,\n}\n//or \nages[\"alice\"] = 31\n```\n\n1. map元素不是一个变量，不可以获取它的地址\n2. map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值\n\n\n\n#### 函数\n\n* 函数定义\n\n```go\nfunc funcName(param-list)(result-list){\n\tfunction-body\n}\n```\n\n* 函数签名\n\n函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。\n\n两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。\n\n可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。\n\n```go\nfunc add(a, b int) int {\n\treturn a + b\n}\nfmt.Printf(\"%T\\n\", add) // func(int,int) int\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add(a,b int) int {\n    return a+b\n}\n\nfunc sub(a,b int) int {\n    return a-b\n}\n\ntype Op func(int, int) int //定义一个函数类型\n\nfunc do(f Op, a, b int) int { //定义一个函数，第一个参数是函数类型Op\n    return f(a, b) //函数类型变量可以直接用来进行函数调用\n}\n\nfunc main(){\n    a := do(add,1,2) //函数名add可以当作相同函数类型形参，不需要强制类型转换\n    fmt.Println(a)\n    s := do(sub,1,2)\n    fmt.Println(s)\n}\n\n```\n\n：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。\n\n**注意：**\n1. GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。\n2. GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。\n3. GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。\n4. 函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。\n5. GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。\n6. GO语言没有默认参数值的概念也不能指定实参名。\n\n\n\n#### 结构体\n\n* 示例\n\n```go\ntype Employee struct{\n\tID\t\t\t\tint\n    Name,Address\tstring\n    DoB\t\t\t\ttime.Time\n    Position\t\tstring\n    Salary\t\t\tint\n    ManagerID\t\tint\n}\n//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上\n```\n\n* 初始化\n\n```go\ntype Person struct {\n\tname string\n\tage int\n}\n\n//比较推荐指定字段名初始化\na := Person{name:\"andes\",age:\"18\"}\na := Person{\n    name:\"andes\",\n    age:18,\n}\na := Person{\n    name:\"andes\",\n    age:18}\n//初始化语句的末尾的‘}’独占一行时，最后一个字段的后面一定要带上逗号\n\ntype Apple struct{int}\nf := Apple{3}\nfmt.Println(f)//#输出{3}\n```\n\n* 匿名字段\n\n在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。\n\n```go\ntype File struct{\n\t*file\n}\n```\n\n1. 被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。\n2. 匿名字段的字段名默认就是类型名。\n3. 如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。\n4. 一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。\n5. 如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。\n\n6. 在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。\n\n7. 如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。\n\n8. 一个结构体可以同时包含可导出和不可导出的成员变量。\n\n9. 如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。\n\n\n\n#### 方法\n\n```go\n//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。\npackage geometry\nimport \"math\"\n\ntype Point struct{X,Y float64}\n\n//普通的函数\nfunc Distance(p,q Point) float64 {\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n\n//Point类型的方法\nfunc (p Point) Distance(q Point) float64{\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。\n//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。\n\n//上面两个Distance函数声明没有冲突。\n//第一个声明一个包级别的函数，称为 geometry.Distance \n//第二个声明一个类型Point的方法，因此它的名字是Point.Distance\n```\n\n1. 由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。\n2. GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。\n3. 不允许本身是指针的类型进行方法声明。\n4. 在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。\n\n\n\n#### 接口\n\n```go\n//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法\n//\ntype Reader interface{\n    Read(p []byte)(n int,err error)\n}\n```\n\n* 接口值\n\n​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。\n\n​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。\n\n```go\nvar w io.Writer\nw = os.Stdout\n//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价\n//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。\n```\n\n注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。\n\n\n\n\n\n#### 反射\n\n\n\n\n\n\n\n\n\n####　包和ｇo工具\n\n众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。\n\n第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；\n\n第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。\n\n第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。\n\n对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。\n\n```go\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n\t\"golang.org/x/net/html\"\n\t\"github.com/go-sql-driver/mysql\"\n)\n```\n\n\n\n* 重命名导入\n\n```go\nimport(\n\t\"crypto/rand\"\n\tmrand \"math/rand\" //通过指定一个不同的名称mrand就避免了冲突\n)\n```\n\n\n\n* 空白导入\n\n如果导入的包的名字没有在文件中引用，就会产生一个编译错误。\n\n```go\nimport _ \"image/png\"\t//注册PNG解码器\t\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/golang/bases/note.md","raw":"---\ntitle: Golang - 基础骨架\ncategories: \n- [golang, base]\ntags: \n- programming_language \n- golang\n---\n\n# GOLANG\n\n#### GO语言的特性\n\n1. GO语言是按值调用语言。\n\n2. GO是面向函数的语言，仅管它允许面向对象风格的编程。\n\n   它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。\n\n   具体表现为：结构体嵌套，为类型定义方法，接口等\n\n3. 就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。\n\n\n\n#### GO语言的实用功能包\n\n1. golang.org/x/net/html:\n\n它提供了解析HTML的功能。\n\n2. \n\n\n\n#### 变量\n\n* 短变量声明\n\n一个容易被忽略但重要的地方是：\n\n短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。\n\n在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。\n\n```go\nin,err := os.Open(infile)\n//下面的语句和第二条语句联系一起看\nout,err := os.Create(outfile)\n```\n\n短变量声明最少声明一个新变量，否则编译不通过。\n\n\n\n#### slice\n\n```go\n//slice操作符s[i:j]\n//数据结构如下\n// src/runtime/slice.go(go.19.1)\ntype slice struct{\n    array unsafe.Pointer //指向底层数组的指针\n    len int //slice元素数量\n    cap int //底层数组的容量\n}\n```\n\n1. 如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。\n\n2. 和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。\n3. slice需要做深度比较，因此不能用slice作为map的键。\n4. slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。\n\n\n\n#### map\n\n```go\n//创建一个map\nages = make(map[string]int) //创建了一个键为string值为int的map\n//初始化\nages := map[string]int{\n\t\"alice\":31,\n\t\"charlie\":34,\n}\n//or \nages[\"alice\"] = 31\n```\n\n1. map元素不是一个变量，不可以获取它的地址\n2. map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值\n\n\n\n#### 函数\n\n* 函数定义\n\n```go\nfunc funcName(param-list)(result-list){\n\tfunction-body\n}\n```\n\n* 函数签名\n\n函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。\n\n两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。\n\n可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。\n\n```go\nfunc add(a, b int) int {\n\treturn a + b\n}\nfmt.Printf(\"%T\\n\", add) // func(int,int) int\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add(a,b int) int {\n    return a+b\n}\n\nfunc sub(a,b int) int {\n    return a-b\n}\n\ntype Op func(int, int) int //定义一个函数类型\n\nfunc do(f Op, a, b int) int { //定义一个函数，第一个参数是函数类型Op\n    return f(a, b) //函数类型变量可以直接用来进行函数调用\n}\n\nfunc main(){\n    a := do(add,1,2) //函数名add可以当作相同函数类型形参，不需要强制类型转换\n    fmt.Println(a)\n    s := do(sub,1,2)\n    fmt.Println(s)\n}\n\n```\n\n：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。\n\n**注意：**\n1. GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。\n2. GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。\n3. GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。\n4. 函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。\n5. GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。\n6. GO语言没有默认参数值的概念也不能指定实参名。\n\n\n\n#### 结构体\n\n* 示例\n\n```go\ntype Employee struct{\n\tID\t\t\t\tint\n    Name,Address\tstring\n    DoB\t\t\t\ttime.Time\n    Position\t\tstring\n    Salary\t\t\tint\n    ManagerID\t\tint\n}\n//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上\n```\n\n* 初始化\n\n```go\ntype Person struct {\n\tname string\n\tage int\n}\n\n//比较推荐指定字段名初始化\na := Person{name:\"andes\",age:\"18\"}\na := Person{\n    name:\"andes\",\n    age:18,\n}\na := Person{\n    name:\"andes\",\n    age:18}\n//初始化语句的末尾的‘}’独占一行时，最后一个字段的后面一定要带上逗号\n\ntype Apple struct{int}\nf := Apple{3}\nfmt.Println(f)//#输出{3}\n```\n\n* 匿名字段\n\n在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。\n\n```go\ntype File struct{\n\t*file\n}\n```\n\n1. 被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。\n2. 匿名字段的字段名默认就是类型名。\n3. 如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。\n4. 一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。\n5. 如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。\n\n6. 在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。\n\n7. 如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。\n\n8. 一个结构体可以同时包含可导出和不可导出的成员变量。\n\n9. 如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。\n\n\n\n#### 方法\n\n```go\n//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。\npackage geometry\nimport \"math\"\n\ntype Point struct{X,Y float64}\n\n//普通的函数\nfunc Distance(p,q Point) float64 {\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n\n//Point类型的方法\nfunc (p Point) Distance(q Point) float64{\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。\n//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。\n\n//上面两个Distance函数声明没有冲突。\n//第一个声明一个包级别的函数，称为 geometry.Distance \n//第二个声明一个类型Point的方法，因此它的名字是Point.Distance\n```\n\n1. 由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。\n2. GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。\n3. 不允许本身是指针的类型进行方法声明。\n4. 在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。\n\n\n\n#### 接口\n\n```go\n//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法\n//\ntype Reader interface{\n    Read(p []byte)(n int,err error)\n}\n```\n\n* 接口值\n\n​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。\n\n​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。\n\n```go\nvar w io.Writer\nw = os.Stdout\n//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价\n//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。\n```\n\n注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。\n\n\n\n\n\n#### 反射\n\n\n\n\n\n\n\n\n\n####　包和ｇo工具\n\n众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。\n\n第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；\n\n第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。\n\n第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。\n\n对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。\n\n```go\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n\t\"golang.org/x/net/html\"\n\t\"github.com/go-sql-driver/mysql\"\n)\n```\n\n\n\n* 重命名导入\n\n```go\nimport(\n\t\"crypto/rand\"\n\tmrand \"math/rand\" //通过指定一个不同的名称mrand就避免了冲突\n)\n```\n\n\n\n* 空白导入\n\n如果导入的包的名字没有在文件中引用，就会产生一个编译错误。\n\n```go\nimport _ \"image/png\"\t//注册PNG解码器\t\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"golang/bases/note","published":1,"date":"2020-07-17T12:52:26.629Z","updated":"2020-07-17T12:52:26.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7h24000hxylz6nx70ici","content":"\n        <h1 id=\"GOLANG\"   >\n          <a href=\"#GOLANG\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG</h1>\n      \n        <h4 id=\"GO语言的特性\"   >\n          <a href=\"#GO语言的特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的特性</h4>\n      <ol>\n<li><p>GO语言是按值调用语言。</p>\n</li>\n<li><p>GO是面向函数的语言，仅管它允许面向对象风格的编程。</p>\n<p>它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。</p>\n<p>具体表现为：结构体嵌套，为类型定义方法，接口等</p>\n</li>\n<li><p>就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。</p>\n</li>\n</ol>\n\n        <h4 id=\"GO语言的实用功能包\"   >\n          <a href=\"#GO语言的实用功能包\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的实用功能包</h4>\n      <ol>\n<li>golang.org/x/net/html:</li>\n</ol>\n<p>它提供了解析HTML的功能。</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n\n        <h4 id=\"变量\"   >\n          <a href=\"#变量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>变量</h4>\n      <ul>\n<li>短变量声明</li>\n</ul>\n<p>一个容易被忽略但重要的地方是：</p>\n<p>短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。</p>\n<p>在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in,err := os.Open(infile)</span><br><span class=\"line\"><span class=\"comment\">//下面的语句和第二条语句联系一起看</span></span><br><span class=\"line\">out,err := os.Create(outfile)</span><br></pre></td></tr></table></div></figure>\n\n<p>短变量声明最少声明一个新变量，否则编译不通过。</p>\n\n        <h4 id=\"slice\"   >\n          <a href=\"#slice\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>slice</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//slice操作符s[i:j]</span></span><br><span class=\"line\"><span class=\"comment\">//数据结构如下</span></span><br><span class=\"line\"><span class=\"comment\">// src/runtime/slice.go(go.19.1)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    array unsafe.Pointer <span class=\"comment\">//指向底层数组的指针</span></span><br><span class=\"line\">    <span class=\"built_in\">len</span> <span class=\"keyword\">int</span> <span class=\"comment\">//slice元素数量</span></span><br><span class=\"line\">    <span class=\"built_in\">cap</span> <span class=\"keyword\">int</span> <span class=\"comment\">//底层数组的容量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。</p>\n</li>\n<li><p>和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。</p>\n</li>\n<li><p>slice需要做深度比较，因此不能用slice作为map的键。</p>\n</li>\n<li><p>slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。</p>\n</li>\n</ol>\n\n        <h4 id=\"map\"   >\n          <a href=\"#map\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>map</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个map</span></span><br><span class=\"line\">ages = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>) <span class=\"comment\">//创建了一个键为string值为int的map</span></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">ages := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"alice\"</span>:<span class=\"number\">31</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"charlie\"</span>:<span class=\"number\">34</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or </span></span><br><span class=\"line\">ages[<span class=\"string\">\"alice\"</span>] = <span class=\"number\">31</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>map元素不是一个变量，不可以获取它的地址</li>\n<li>map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值</li>\n</ol>\n\n        <h4 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>函数</h4>\n      <ul>\n<li>函数定义</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName</span><span class=\"params\">(param-list)</span><span class=\"params\">(result-list)</span></span>&#123;</span><br><span class=\"line\">\tfunction-body</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>函数签名</li>\n</ul>\n<p>函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。</p>\n<p>两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。</p>\n<p>可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%T\\n\"</span>, add) <span class=\"comment\">// func(int,int) int</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sub</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a-b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Op <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span> //定义一个函数类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">do</span><span class=\"params\">(f Op, a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"comment\">//定义一个函数，第一个参数是函数类型Op</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a, b) <span class=\"comment\">//函数类型变量可以直接用来进行函数调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a := do(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//函数名add可以当作相同函数类型形参，不需要强制类型转换</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    s := do(sub,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。</li>\n<li>GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。</li>\n<li>GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。</li>\n<li>函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。</li>\n<li>GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。</li>\n<li>GO语言没有默认参数值的概念也不能指定实参名。</li>\n</ol>\n\n        <h4 id=\"结构体\"   >\n          <a href=\"#结构体\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>结构体</h4>\n      <ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tID\t\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    Name,Address\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    DoB\t\t\t\ttime.Time</span><br><span class=\"line\">    Position\t\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    Salary\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    ManagerID\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较推荐指定字段名初始化</span></span><br><span class=\"line\">a := Person&#123;name:<span class=\"string\">\"andes\"</span>,age:<span class=\"string\">\"18\"</span>&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化语句的末尾的‘&#125;’独占一行时，最后一个字段的后面一定要带上逗号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Apple <span class=\"keyword\">struct</span>&#123;<span class=\"keyword\">int</span>&#125;</span><br><span class=\"line\">f := Apple&#123;<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">fmt.Println(f)<span class=\"comment\">//#输出&#123;3&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匿名字段</li>\n</ul>\n<p>在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\t*file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。</p>\n</li>\n<li><p>匿名字段的字段名默认就是类型名。</p>\n</li>\n<li><p>如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。</p>\n</li>\n<li><p>一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。</p>\n</li>\n<li><p>如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。</p>\n</li>\n<li><p>在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。</p>\n</li>\n<li><p>如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。</p>\n</li>\n<li><p>一个结构体可以同时包含可导出和不可导出的成员变量。</p>\n</li>\n<li><p>如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。</p>\n</li>\n</ol>\n\n        <h4 id=\"方法\"   >\n          <a href=\"#方法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>方法</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> geometry</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span>&#123;X,Y <span class=\"keyword\">float64</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Distance</span><span class=\"params\">(p,q Point)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Point类型的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span> <span class=\"title\">Distance</span><span class=\"params\">(q Point)</span> <span class=\"title\">float64</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。</span></span><br><span class=\"line\"><span class=\"comment\">//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面两个Distance函数声明没有冲突。</span></span><br><span class=\"line\"><span class=\"comment\">//第一个声明一个包级别的函数，称为 geometry.Distance </span></span><br><span class=\"line\"><span class=\"comment\">//第二个声明一个类型Point的方法，因此它的名字是Point.Distance</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。</li>\n<li>GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。</li>\n<li>不允许本身是指针的类型进行方法声明。</li>\n<li>在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。</li>\n</ol>\n\n        <h4 id=\"接口\"   >\n          <a href=\"#接口\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>接口</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read(p []<span class=\"keyword\">byte</span>)(n <span class=\"keyword\">int</span>,err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>接口值</li>\n</ul>\n<p>​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。</p>\n<p>​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = os.Stdout</span><br><span class=\"line\"><span class=\"comment\">//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价</span></span><br><span class=\"line\"><span class=\"comment\">//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。</span></span><br></pre></td></tr></table></div></figure>\n\n<p>注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。</p>\n\n        <h4 id=\"反射\"   >\n          <a href=\"#反射\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>反射</h4>\n      <p>####　包和ｇo工具</p>\n<p>众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。</p>\n<p>第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；</p>\n<p>第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。</p>\n<p>第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。</p>\n<p>对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/net/html\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>重命名导入</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"crypto/rand\"</span></span><br><span class=\"line\">\tmrand <span class=\"string\">\"math/rand\"</span> <span class=\"comment\">//通过指定一个不同的名称mrand就避免了冲突</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>空白导入</li>\n</ul>\n<p>如果导入的包的名字没有在文件中引用，就会产生一个编译错误。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">\"image/png\"</span>\t<span class=\"comment\">//注册PNG解码器</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h1 id=\"GOLANG\"   >\n          <a href=\"#GOLANG\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG</h1>\n      \n        <h4 id=\"GO语言的特性\"   >\n          <a href=\"#GO语言的特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的特性</h4>\n      <ol>\n<li><p>GO语言是按值调用语言。</p>\n</li>\n<li><p>GO是面向函数的语言，仅管它允许面向对象风格的编程。</p>\n<p>它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。</p>\n<p>具体表现为：结构体嵌套，为类型定义方法，接口等</p>\n</li>\n<li><p>就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。</p>\n</li>\n</ol>\n\n        <h4 id=\"GO语言的实用功能包\"   >\n          <a href=\"#GO语言的实用功能包\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的实用功能包</h4>\n      <ol>\n<li>golang.org/x/net/html:</li>\n</ol>\n<p>它提供了解析HTML的功能。</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n\n        <h4 id=\"变量\"   >\n          <a href=\"#变量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>变量</h4>\n      <ul>\n<li>短变量声明</li>\n</ul>\n<p>一个容易被忽略但重要的地方是：</p>\n<p>短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。</p>\n<p>在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in,err := os.Open(infile)</span><br><span class=\"line\"><span class=\"comment\">//下面的语句和第二条语句联系一起看</span></span><br><span class=\"line\">out,err := os.Create(outfile)</span><br></pre></td></tr></table></div></figure>\n\n<p>短变量声明最少声明一个新变量，否则编译不通过。</p>\n\n        <h4 id=\"slice\"   >\n          <a href=\"#slice\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>slice</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//slice操作符s[i:j]</span></span><br><span class=\"line\"><span class=\"comment\">//数据结构如下</span></span><br><span class=\"line\"><span class=\"comment\">// src/runtime/slice.go(go.19.1)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    array unsafe.Pointer <span class=\"comment\">//指向底层数组的指针</span></span><br><span class=\"line\">    <span class=\"built_in\">len</span> <span class=\"keyword\">int</span> <span class=\"comment\">//slice元素数量</span></span><br><span class=\"line\">    <span class=\"built_in\">cap</span> <span class=\"keyword\">int</span> <span class=\"comment\">//底层数组的容量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。</p>\n</li>\n<li><p>和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。</p>\n</li>\n<li><p>slice需要做深度比较，因此不能用slice作为map的键。</p>\n</li>\n<li><p>slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。</p>\n</li>\n</ol>\n\n        <h4 id=\"map\"   >\n          <a href=\"#map\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>map</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个map</span></span><br><span class=\"line\">ages = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>) <span class=\"comment\">//创建了一个键为string值为int的map</span></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">ages := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"alice\"</span>:<span class=\"number\">31</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"charlie\"</span>:<span class=\"number\">34</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or </span></span><br><span class=\"line\">ages[<span class=\"string\">\"alice\"</span>] = <span class=\"number\">31</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>map元素不是一个变量，不可以获取它的地址</li>\n<li>map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值</li>\n</ol>\n\n        <h4 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>函数</h4>\n      <ul>\n<li>函数定义</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName</span><span class=\"params\">(param-list)</span><span class=\"params\">(result-list)</span></span>&#123;</span><br><span class=\"line\">\tfunction-body</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>函数签名</li>\n</ul>\n<p>函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。</p>\n<p>两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。</p>\n<p>可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%T\\n\"</span>, add) <span class=\"comment\">// func(int,int) int</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sub</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a-b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Op <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span> //定义一个函数类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">do</span><span class=\"params\">(f Op, a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"comment\">//定义一个函数，第一个参数是函数类型Op</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a, b) <span class=\"comment\">//函数类型变量可以直接用来进行函数调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a := do(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//函数名add可以当作相同函数类型形参，不需要强制类型转换</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    s := do(sub,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。</li>\n<li>GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。</li>\n<li>GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。</li>\n<li>函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。</li>\n<li>GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。</li>\n<li>GO语言没有默认参数值的概念也不能指定实参名。</li>\n</ol>\n\n        <h4 id=\"结构体\"   >\n          <a href=\"#结构体\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>结构体</h4>\n      <ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tID\t\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    Name,Address\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    DoB\t\t\t\ttime.Time</span><br><span class=\"line\">    Position\t\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    Salary\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    ManagerID\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较推荐指定字段名初始化</span></span><br><span class=\"line\">a := Person&#123;name:<span class=\"string\">\"andes\"</span>,age:<span class=\"string\">\"18\"</span>&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化语句的末尾的‘&#125;’独占一行时，最后一个字段的后面一定要带上逗号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Apple <span class=\"keyword\">struct</span>&#123;<span class=\"keyword\">int</span>&#125;</span><br><span class=\"line\">f := Apple&#123;<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">fmt.Println(f)<span class=\"comment\">//#输出&#123;3&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匿名字段</li>\n</ul>\n<p>在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\t*file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。</p>\n</li>\n<li><p>匿名字段的字段名默认就是类型名。</p>\n</li>\n<li><p>如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。</p>\n</li>\n<li><p>一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。</p>\n</li>\n<li><p>如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。</p>\n</li>\n<li><p>在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。</p>\n</li>\n<li><p>如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。</p>\n</li>\n<li><p>一个结构体可以同时包含可导出和不可导出的成员变量。</p>\n</li>\n<li><p>如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。</p>\n</li>\n</ol>\n\n        <h4 id=\"方法\"   >\n          <a href=\"#方法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>方法</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> geometry</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span>&#123;X,Y <span class=\"keyword\">float64</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Distance</span><span class=\"params\">(p,q Point)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Point类型的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span> <span class=\"title\">Distance</span><span class=\"params\">(q Point)</span> <span class=\"title\">float64</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。</span></span><br><span class=\"line\"><span class=\"comment\">//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面两个Distance函数声明没有冲突。</span></span><br><span class=\"line\"><span class=\"comment\">//第一个声明一个包级别的函数，称为 geometry.Distance </span></span><br><span class=\"line\"><span class=\"comment\">//第二个声明一个类型Point的方法，因此它的名字是Point.Distance</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。</li>\n<li>GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。</li>\n<li>不允许本身是指针的类型进行方法声明。</li>\n<li>在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。</li>\n</ol>\n\n        <h4 id=\"接口\"   >\n          <a href=\"#接口\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>接口</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read(p []<span class=\"keyword\">byte</span>)(n <span class=\"keyword\">int</span>,err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>接口值</li>\n</ul>\n<p>​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。</p>\n<p>​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = os.Stdout</span><br><span class=\"line\"><span class=\"comment\">//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价</span></span><br><span class=\"line\"><span class=\"comment\">//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。</span></span><br></pre></td></tr></table></div></figure>\n\n<p>注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。</p>\n\n        <h4 id=\"反射\"   >\n          <a href=\"#反射\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>反射</h4>\n      <p>####　包和ｇo工具</p>\n<p>众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。</p>\n<p>第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；</p>\n<p>第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。</p>\n<p>第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。</p>\n<p>对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/net/html\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>重命名导入</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"crypto/rand\"</span></span><br><span class=\"line\">\tmrand <span class=\"string\">\"math/rand\"</span> <span class=\"comment\">//通过指定一个不同的名称mrand就避免了冲突</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>空白导入</li>\n</ul>\n<p>如果导入的包的名字没有在文件中引用，就会产生一个编译错误。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">\"image/png\"</span>\t<span class=\"comment\">//注册PNG解码器</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Golang - 语言特性","date":"2020-07-17T03:56:11.000Z","_content":"# GOLANG 语言特性\n","source":"_posts/golang/characteristic/note.md","raw":"---\ntitle: Golang - 语言特性\ndate: 2020-07-17 11:56:11\ncategories:\n- [golang,characteristic]\ntags:\n- golang\n- programming_language\n---\n# GOLANG 语言特性\n","slug":"golang/characteristic/note","published":1,"updated":"2020-07-17T12:52:26.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbf7h25000jxylz0dc2fsu9","content":"\n        <h1 id=\"GOLANG-语言特性\"   >\n          <a href=\"#GOLANG-语言特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG 语言特性</h1>\n      ","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h1 id=\"GOLANG-语言特性\"   >\n          <a href=\"#GOLANG-语言特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG 语言特性</h1>\n      "}],"PostAsset":[{"_id":"source/_posts/network/计算机网络笔记与思考/ISP的互联.jpg","post":"ckjbf7gly0004xylz2e9aeyc9","slug":"ISP的互联.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckjbf7gly0004xylz2e9aeyc9","category_id":"ckjbf7gm30007xylzaiph26yf","_id":"ckjbf7gm8000bxylza77c7n5m"},{"post_id":"ckjbf7glz0005xylzhlm9bxv0","category_id":"ckjbf7gm60009xylz6aut4q2p","_id":"ckjbf7gm8000dxylzfp5kh4g8"},{"post_id":"ckjbf7h21000exylzcnm0c1s9","category_id":"ckjbf7h25000ixylzfdou6nvn","_id":"ckjbf7h2h0010xylzacp39eul"},{"post_id":"ckjbf7h21000exylzcnm0c1s9","category_id":"ckjbf7h2e000sxylz3shuapab","_id":"ckjbf7h2i0012xylz2lk75yr8"},{"post_id":"ckjbf7h22000fxylz4u4221lp","category_id":"ckjbf7h25000ixylzfdou6nvn","_id":"ckjbf7h2j0014xylz19r1gl1t"},{"post_id":"ckjbf7h22000fxylz4u4221lp","category_id":"ckjbf7h2g000xxylzgm7ogk4s","_id":"ckjbf7h2j0015xylzh4ry73ci"},{"post_id":"ckjbf7h24000hxylz6nx70ici","category_id":"ckjbf7h2b000oxylz6q0b9qls","_id":"ckjbf7h2j0016xylzdeawcsyx"},{"post_id":"ckjbf7h24000hxylz6nx70ici","category_id":"ckjbf7h2h000yxylzcjbte2bp","_id":"ckjbf7h2k0017xylzdsmph9ak"},{"post_id":"ckjbf7h25000jxylz0dc2fsu9","category_id":"ckjbf7h2b000oxylz6q0b9qls","_id":"ckjbf7h2k0018xylzafofb7ch"},{"post_id":"ckjbf7h25000jxylz0dc2fsu9","category_id":"ckjbf7h2i0013xylz3084biaw","_id":"ckjbf7h2k0019xylz3mc3h9ek"}],"PostTag":[{"post_id":"ckjbf7gly0004xylz2e9aeyc9","tag_id":"ckjbf7gm10006xylz0gh1a3ha","_id":"ckjbf7gm7000axylzb1bp08lr"},{"post_id":"ckjbf7glz0005xylzhlm9bxv0","tag_id":"ckjbf7gm60008xylzd5diffp3","_id":"ckjbf7gm8000cxylzdfch9vt6"},{"post_id":"ckjbf7h21000exylzcnm0c1s9","tag_id":"ckjbf7h23000gxylze12q99u9","_id":"ckjbf7h2a000mxylzhc9vc1br"},{"post_id":"ckjbf7h22000fxylz4u4221lp","tag_id":"ckjbf7h23000gxylze12q99u9","_id":"ckjbf7h2c000pxylzdxqf60jb"},{"post_id":"ckjbf7h24000hxylz6nx70ici","tag_id":"ckjbf7h2a000nxylz9ygh4x6k","_id":"ckjbf7h2f000uxylz95dvh1wf"},{"post_id":"ckjbf7h24000hxylz6nx70ici","tag_id":"ckjbf7h2c000qxylzf3ivfs42","_id":"ckjbf7h2f000vxylzam602tet"},{"post_id":"ckjbf7h25000jxylz0dc2fsu9","tag_id":"ckjbf7h2c000qxylzf3ivfs42","_id":"ckjbf7h2h000zxylz60o95b74"},{"post_id":"ckjbf7h25000jxylz0dc2fsu9","tag_id":"ckjbf7h2a000nxylz9ygh4x6k","_id":"ckjbf7h2i0011xylzbvm5esp6"}],"Tag":[{"name":"computer_network","_id":"ckjbf7gm10006xylz0gh1a3ha"},{"name":"learning-plan","_id":"ckjbf7gm60008xylzd5diffp3"},{"name":"algorithm","_id":"ckjbf7h23000gxylze12q99u9"},{"name":"programming_language","_id":"ckjbf7h2a000nxylz9ygh4x6k"},{"name":"golang","_id":"ckjbf7h2c000qxylzf3ivfs42"}]}}